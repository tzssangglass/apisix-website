"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[32355],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return h}});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=i.createContext({}),o=function(e){var t=i.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=o(e.components);return i.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,u=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),d=o(n),h=r,m=d["".concat(u,".").concat(h)]||d[h]||c[h]||a;return n?i.createElement(m,l(l({ref:t},s),{},{components:n})):i.createElement(m,l({ref:t},s))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=d;var p={};for(var u in t)hasOwnProperty.call(t,u)&&(p[u]=t[u]);p.originalType=e,p.mdxType="string"==typeof e?e:r,l[1]=p;for(var o=2;o<a;o++)l[o]=n[o];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},40828:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return u},toc:function(){return o},default:function(){return c}});var i=n(87462),r=n(63366),a=(n(67294),n(3905)),l={title:"public-api"},p=void 0,u={unversionedId:"plugins/public-api",id:"plugins/public-api",isDocsHomePage:!1,title:"public-api",description:"\x3c!--",source:"@site/docs/apisix/plugins/public-api.md",sourceDirName:"plugins",slug:"/plugins/public-api",permalink:"/zh/docs/apisix/next/plugins/public-api",editUrl:"https://github.com/apache/apisix/edit/master/docs/zh/latest/plugins/public-api.md",tags:[],version:"current",frontMatter:{title:"public-api"},sidebar:"docs",previous:{title:"csrf",permalink:"/zh/docs/apisix/next/plugins/csrf"},next:{title:"limit-req",permalink:"/zh/docs/apisix/next/plugins/limit-req"}},o=[{value:"Description",id:"description",children:[]},{value:"Attributes",id:"attributes",children:[]},{value:"Example",id:"example",children:[{value:"Prerequisites",id:"prerequisites",children:[]},{value:"Basic Use Case",id:"basic-use-case",children:[]},{value:"Customize URI",id:"customize-uri",children:[]},{value:"Protect Route",id:"protect-route",children:[]}]}],s={toc:o};function c(e){var t=e.components,n=(0,r.Z)(e,["components"]);return(0,a.kt)("wrapper",(0,i.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"description"},"Description"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"public-api")," plugin is used to enhance the plugin public API access control.\nWhen current users develop custom plugins, they can register some public APIs for fixed functionality, such as the ",(0,a.kt)("inlineCode",{parentName:"p"},"/apisix/plugin/jwt/sign")," API in ",(0,a.kt)("inlineCode",{parentName:"p"},"jwt-auth"),". These APIs can only apply limited plugins for access control (currently only ",(0,a.kt)("inlineCode",{parentName:"p"},"ip-restriction"),") by way of plugin interceptors."),(0,a.kt)("p",null,"With the ",(0,a.kt)("inlineCode",{parentName:"p"},"public-api")," plugin, we put all public APIs into the general HTTP API router, which is consistent with the normal Route registered by the user and can apply any plugin. The public API added in the user plugin is no longer expose by default by APISIX, and the user has to manually configure the Route for it, the user can configure any uri and plugin."),(0,a.kt)("h2",{id:"attributes"},"Attributes"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Name"),(0,a.kt)("th",{parentName:"tr",align:null},"Type"),(0,a.kt)("th",{parentName:"tr",align:null},"Requirement"),(0,a.kt)("th",{parentName:"tr",align:null},"Default"),(0,a.kt)("th",{parentName:"tr",align:null},"Valid"),(0,a.kt)("th",{parentName:"tr",align:null},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"uri"),(0,a.kt)("td",{parentName:"tr",align:null},"string"),(0,a.kt)("td",{parentName:"tr",align:null},"optional"),(0,a.kt)("td",{parentName:"tr",align:null},'""'),(0,a.kt)("td",{parentName:"tr",align:null}),(0,a.kt)("td",{parentName:"tr",align:null},"The uri of the public API. When you set up the route, you can use this to configure the original API uri if it is used in a way that is inconsistent with the original public API uri.")))),(0,a.kt)("h2",{id:"example"},"Example"),(0,a.kt)("p",null,"We take the ",(0,a.kt)("inlineCode",{parentName:"p"},"jwt-auth")," token sign API as an example to show how to configure the ",(0,a.kt)("inlineCode",{parentName:"p"},"public-api")," plugin. Also, the ",(0,a.kt)("inlineCode",{parentName:"p"},"key-auth")," will be used to show how to configure the protection plugin for the public API."),(0,a.kt)("h3",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("p",null,"The use of key-auth and jwt-auth requires the configuration of a consumer that contains the configuration of these plugins, and you need to create one in advance, the process will be omitted here."),(0,a.kt)("h3",{id:"basic-use-case"},"Basic Use Case"),(0,a.kt)("p",null,"First we will setup a route."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ curl -X PUT 'http://127.0.0.1:9080/apisix/admin/routes/r1' \\\n    -H 'X-API-KEY: <api-key>' \\\n    -H 'Content-Type: application/json' \\\n    -d '{\n    \"uri\": \"/apisix/plugin/jwt/sign\",\n    \"plugins\": {\n        \"public-api\": {}\n    }\n}'\n")),(0,a.kt)("p",null,"Let's test it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ curl 'http://127.0.0.1:9080/apisix/plugin/jwt/sign?key=user-key'\n")),(0,a.kt)("p",null,"It will respond to a text JWT."),(0,a.kt)("h3",{id:"customize-uri"},"Customize URI"),(0,a.kt)("p",null,"Let's setup another route."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'$ curl -X PUT \'http://127.0.0.1:9080/apisix/admin/routes/r2\' \\\n    -H \'X-API-KEY: <api-key>\' \\\n    -H \'Content-Type: application/json\' \\\n    -d \'{\n    "uri": "/gen_token",\n    "plugins": {\n        "public-api": {\n            "uri": "/apisix/plugin/jwt/sign"\n        }\n    }\n}\'\n')),(0,a.kt)("p",null,"Let's test it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ curl 'http://127.0.0.1:9080/gen_token?key=user-key'\n")),(0,a.kt)("p",null,"It will still respond to a text JWT. We can see that users are free to configure URI for the public API to match."),(0,a.kt)("h3",{id:"protect-route"},"Protect Route"),(0,a.kt)("p",null,"Let's modify the last route and add ",(0,a.kt)("inlineCode",{parentName:"p"},"key-auth")," authentication to it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},'$ curl -X PUT \'http://127.0.0.1:9080/apisix/admin/routes/r2\' \\\n    -H \'X-API-KEY: <api-key>\' \\\n    -H \'Content-Type: application/json\' \\\n    -d \'{\n    "uri": "/gen_token",\n    "plugins": {\n        "public-api": {\n            "uri": "/apisix/plugin/jwt/sign"\n        },\n        "key-auth": {}\n    }\n}\'\n')),(0,a.kt)("p",null,"Let's test it."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"$ curl -i 'http://127.0.0.1:9080/gen_token?key=user-key'\n    -H \"apikey: test-apikey\"\nHTTP/1.1 200 OK\n\n# Failed request\n$ curl -i 'http://127.0.0.1:9080/gen_token?key=user-key'\nHTTP/1.1 401 UNAUTHORIZED\n")),(0,a.kt)("p",null,"It will still respond to a text JWT. If we don't add ",(0,a.kt)("inlineCode",{parentName:"p"},"apikey")," to the request header, it will respond with a 401 block request. In this way, we have implemented a plugin approach to protect the public API."))}c.isMDXComponent=!0}}]);